<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAPgAAAH+AAAH/wAAD/+AAB//4AB///AA/8=
</value>
  </data>
</root>